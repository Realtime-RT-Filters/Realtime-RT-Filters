#version 460
#extension GL_EXT_ray_tracing : require
// #extension GL_GOOGLE_include_directive : enable
// #extension GL_ARB_shader_clock : enable

#include "binding.glsl"
#include "raycommon.glsl"
#include "sampling.glsl"

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(binding = B_ACCELERATIONSTRUCTURE ) uniform accelerationStructureEXT topLevelAS;
layout(binding = B_IMAGE, rgba8) uniform image2D image;
layout(binding = B_UBO) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	vec4 lightPos;
	int vertexSize;
} cam;

layout(push_constant) uniform Constants
{
  vec4  clearColor;
  float lightIntensity;
  int   lightType;
  int   frame;
  int   samples;
  int   bounces;
  int   bounceSamples;
  float temporalAlpha;
}
pushC;

void main() 
{

// Initialize the random number
  // vec3 hitValue  = vec3(0);

  // // Send sampels through every pixel
  // for (int smpl = 0; smpl < pushC.samples; smpl++)
  // {
	// // seed for Random Values
    // int smpl = 0;
    // uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pushC.frame * pushC.samples + smpl);
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) ;
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2       d           = inUV * 2.0 - 1.0;

    vec4 origin            = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target            = cam.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction         = cam.viewInverse * vec4(normalize(target.xyz/ target.w), 0);

    // prd.attenuation  = vec3(1.0f);
    // prd.seed         = seed;
    // prd.depth        = 0;

    
    uint rayFlags     = gl_RayFlagsOpaqueEXT;
    uint cullMask     = 0xff;
    float tmin        = 0.001;
    float tmax        = 10000.0;

    traceRayEXT(topLevelAS,            // acceleration structure
                rayFlags,  // rayFlags
                cullMask,                  // cullMask
                0,                     // sbtRecordOffset
                0,                     // sbtRecordStride
                0,                     // missIndex
                origin.xyz,            // ray origin
                tmin,                 // ray min range
                direction.xyz,         // ray direction
                tmax,               // ray max range
                0                      // payload (location = 0)
    );
    // hitValue += 1;
    // hitValue += prd.radiance;
  // }
  // Result
  // hitValue /= pushC.samples;
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.albedo, 0.0));
}
