#version 460
#extension GL_EXT_ray_tracing : require
// #extension GL_GOOGLE_include_directive : enable
// #extension GL_ARB_shader_clock : enable

#include "binding.glsl"
#include "raycommon.glsl"
#include "sampling.glsl"

layout(location = 0) rayPayloadEXT S_HitPayload prd;

layout(binding = B_ACCELERATIONSTRUCTURE) uniform accelerationStructureEXT topLevelAS;
layout(binding = B_IMAGE, rgba16f) uniform image2D image;

#define BIND_SCENEINFO B_UBO
#define PUSHC_PATHTRACERCONFIG 0
#include "../ubo_definitions.glsl"

//layout(binding = B_UBO) uniform CameraProperties
//{
//	mat4 viewInverse;
//	mat4 projInverse;
//	vec4 lightPos;
//	int vertexSize;
//} cam;

S_HitPayload InitHitpayload(in uint seed)
{
	S_HitPayload result;
	result.radiance = vec3(0.0);
	result.attenuation = vec3(1.0);
	result.seed = seed;
	result.depth = 0;
	result.albedo = vec3(0.0);
	result.normal = vec3(0.0, 1.0, 0.0);
	return result;
}

void main()
{
	// Initialize the random number
	vec3 hitValue = vec3(0);

	// Send sampels
	for (int smpl = 0; smpl < config.PrimarySamplesPerPixel; smpl++)
	{
		// // seed for Random Values
		uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, config.Frame * config.PrimarySamplesPerPixel + smpl);
		const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
		const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
		vec2 d = inUV * 2.0 - 1.0;

		vec4 origin = ubo_sceneinfo.ViewMatInverse * vec4(0, 0, 0, 1);
		vec4 target = ubo_sceneinfo.ProjMatInverse * vec4(d.x, d.y, 1, 1);
		vec4 direction = ubo_sceneinfo.ViewMatInverse * vec4(normalize(target.xyz / target.w), 0);

		prd = InitHitpayload(seed);

		uint rayFlags = gl_RayFlagsOpaqueEXT;
		uint cullMask = 0xff;
		float tmin = 0.001;
		float tmax = 10000.0;

		traceRayEXT(
			topLevelAS,				// acceleration structure
			rayFlags,				// rayFlags
			cullMask,				// cullMask
			0,						// sbtRecordOffset
			0,						// sbtRecordStride
			0,						// missIndex
			origin.xyz,				// ray origin
			tmin,					// ray min range
			direction.xyz,			// ray direction
			tmax,					// ray max range
			0						// payload (location = 0)
		);
		hitValue += prd.radiance;
	}

	// Result
	hitValue /= config.PrimarySamplesPerPixel;
	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 0.5f));
}
