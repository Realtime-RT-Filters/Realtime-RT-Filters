#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable

#include "binding.glsl"
#include "raycommon.glsl"
#include "sampling.glsl"

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
	vec4 lightPos;
} cam;

layout(push_constant) uniform Constants
{
  vec4  clearColor;
  vec3  lightPosition;
  float lightIntensity;
  int   lightType;
  int   frame;
  int   samples;
  int   bounces;
  int   bounceSamples;
  float temporalAlpha;
}
pushC;
// layout(location = 0) rayPayloadEXT vec3 hitValue;

void main() 
{
	// for (int smpl = 0; smpl < mcdata.samples; smpl++)
	// {
		
	// 	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	// 	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	// 	vec2 d = vec2(1.0,0.5);

	// 	vec4 origin = cam.viewInverse * vec4(0,1,0,1);
	// 	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	// 	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz / target.w), 0) ;

	// 	uint rayFlags = gl_RayFlagsOpaqueEXT;
	// 	uint cullMask = 0xff;
	// 	float tmin = 0.001;
	// 	float tmax = 10000.0;

	// 	traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
	// }
	// imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 0.0));


// ----------

// Initialize the random number
  vec3 res_normal = vec3(0);
  vec3 res_albedo = vec3(0);
  vec3 hitValue  = vec3(0);

  // Send sampels through every pixel
  for (int smpl = 0; smpl < pushC.samples; smpl++)
  {
	// seed for Random Values
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pushC.frame * pushC.samples + smpl);
    // float r1  = rnd(seed);
    // float r2  = rnd(seed);

    // Subpixel jitter: send the ray through a different position inside the pixel each time, to provide antialiasing.
    // vec2 subpixelJitter = mcdata.samples == 1 ? vec2(0.0f, 0.0f) : vec2(r1 - 0.5f, r2 - 0.5f);

    // const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) + subpixelJitter;
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) ;
    const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2       d           = inUV * 2.0 - 1.0;

    vec4 origin    = cam.viewInverse * vec4(0, 0, 0, 1);
    vec4 target    = cam.projInverse * vec4(d.x, d.y, 1, 1);
    vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);

    prd.attenuation  = vec3(1.0f);
    prd.seed         = seed;
    prd.depth        = 0;
    prd.normal       = vec3(0.0f);
    prd.albedo       = vec3(0.0f);

    traceRayEXT(topLevelAS,            // acceleration structure
                gl_RayFlagsOpaqueEXT,  // rayFlags
                0xFF,                  // cullMask
                0,                     // sbtRecordOffset
                0,                     // sbtRecordStride
                0,                     // missIndex
                origin.xyz,            // ray origin
                0.001,                 // ray min range
                direction.xyz,         // ray direction
                10000.0,               // ray max range
                0                      // payload (location = 0)
    );

    res_normal = prd.normal;
    res_albedo = prd.albedo;
    hitValue += prd.radiance;
  }

  hitValue /= pushC.samples;
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 0.0));

}
